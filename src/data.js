define(["require", "exports"], function (require, exports) {
    "use strict";
    /**
     * Enumeration of possible data types for fields
     */
    (function (DataType) {
        DataType[DataType["Unknown"] = 0] = "Unknown";
        DataType[DataType["String"] = 1] = "String";
        DataType[DataType["Integer"] = 2] = "Integer";
        DataType[DataType["Double"] = 3] = "Double";
        DataType[DataType["Date"] = 4] = "Date";
        DataType[DataType["DateTime"] = 5] = "DateTime";
        DataType[DataType["Boolean"] = 6] = "Boolean";
        DataType[DataType["Blob"] = 7] = "Blob";
    })(exports.DataType || (exports.DataType = {}));
    var DataType = exports.DataType;
    /**
     * RecordState enum - the state of editable record
     */
    (function (RecordState) {
        RecordState[RecordState["Browse"] = 0] = "Browse";
        RecordState[RecordState["Insert"] = 1] = "Insert";
        RecordState[RecordState["Edit"] = 2] = "Edit";
    })(exports.RecordState || (exports.RecordState = {}));
    var RecordState = exports.RecordState;
    /**
     * EventType - enumerates types of events generated by data source
     */
    (function (EventType) {
        EventType[EventType["StateChanged"] = 0] = "StateChanged";
        EventType[EventType["DataChanged"] = 1] = "DataChanged";
        EventType[EventType["CursorMoved"] = 2] = "CursorMoved";
        EventType[EventType["Refreshed"] = 3] = "Refreshed";
    })(exports.EventType || (exports.EventType = {}));
    var EventType = exports.EventType;
    ;
    /**
     * FieldDataLink - a generic implementation of a data link for single field controls
     */
    var FieldDataLink = (function () {
        function FieldDataLink(onChangeEvent, converter) {
            this.onChangeEvent = onChangeEvent;
            this.converter = converter;
        }
        Object.defineProperty(FieldDataLink.prototype, "dataSource", {
            get: function () { return this._dataSource; },
            set: function (value) {
                if (this._dataSource != value) {
                    if (this._dataSource)
                        this._dataSource.removeLink(this);
                    this._dataSource = value;
                    if (this._dataSource)
                        this._dataSource.addLink(this);
                }
            },
            enumerable: true,
            configurable: true
        });
        FieldDataLink.prototype.onChange = function (eventType, data) {
            if (eventType != EventType.StateChanged && this.onChangeEvent)
                this.onChangeEvent(eventType, data);
        };
        Object.defineProperty(FieldDataLink.prototype, "value", {
            get: function () {
                var res = null;
                if (this.dataSource && this.dataSource.current && this.dataField != '') {
                    res = this.dataSource.current[this.dataField];
                    if (this.converter)
                        res = this.converter.decode(this, res);
                }
                return res;
            },
            set: function (val) {
                if (this.dataSource && this.dataSource.current && this.dataField != '') {
                    if (this.dataSource.getState() == RecordState.Browse)
                        this.dataSource.edit();
                    if (this.converter)
                        val = this.converter.decode(this, val);
                    this.dataSource.current[this.dataField] = val;
                    this.dataSource.notifyLinks(EventType.DataChanged, this.dataField);
                }
            },
            enumerable: true,
            configurable: true
        });
        return FieldDataLink;
    }());
    exports.FieldDataLink = FieldDataLink;
    /**
     * CollectionLink - generic implementation of a data link for list controls
     */
    var CollectionLink // implements ICollectionSource
     = (function () {
        function CollectionLink // implements ICollectionSource
            () {
        }
        return CollectionLink // implements ICollectionSource
        ;
    }());
    exports.CollectionLink // implements ICollectionSource
     = CollectionLink // implements ICollectionSource
    ;
});
//# sourceMappingURL=data.js.map